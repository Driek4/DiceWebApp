@model DiceWebApp.Models.DiceManager
@{
    ViewData["Title"] = "Dice Roller";
}

<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

<style>
    button {
        font-weight: bold;
        border: 4px solid black !important;
    }

    .add-dice-btn, .control-btn {
        font-weight: bold;
        border: 4px solid black !important;
        border-radius: 50px;
        padding: 10px 24px;
        font-size: 1.1em;
        margin: 6px;
        cursor: pointer;
        transition: 0.1s;
    }

        .add-dice-btn:hover, .control-btn:hover {
            transform: scale(1.05);
        }

        .add-dice-btn:active, .control-btn:active {
            transform: scale(0.95);
        }

    .drop-area {
        border: 4px dashed black;
        border-radius: 20px;
        min-height: 150px;
        padding: 10px;
        margin: 10px;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 10px;
        justify-items: center;
        align-content: start;
        background-color: #f8f8f8;
        transition: 0.2s;
        position: relative;
    }

    #weapon, #ability1, #ability2 {
        grid-template-columns: repeat(3, 100px);
        grid-auto-rows: 100px;
        justify-content: center;
        align-content: start;
    }

    #pool {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 10px;
    }

    .drop-area.dragover {
        background-color: #e0e0ff;
        transform: scale(1.02);
    }

    .drop-label {
        font-weight: bold;
        margin-bottom: 5px;
        text-align: center;
        width: 100%;
        grid-column: 1 / -1;
    }

    .drop-total {
        position: absolute;
        top: 7px;
        right: 20px;
        font-weight: bold;
        color: black;
        font-size: 2em;
    }

    .dice {
        width: 100px;
        height: 100px;
        font-size: 2em;
        font-weight: bold;
        border: 4px solid black;
        border-radius: 10px;
        cursor: grab;
        user-select: none;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        box-sizing: border-box;
        touch-action: none;
        -webkit-user-drag: none;
    }

        .dice:active {
            cursor: grabbing;
        }

    .overall-total-box {
        border: 4px solid black;
        border-radius: 15px;
        padding: 10px 20px;
        margin-top: 30px;
        background-color: #f0f0f0;
        font-weight: bold;
        font-size: 1.8em;
        text-align: center;
        display: inline-block;
    }

    /* Mobile */
@@media (max-width: 768px) {
    body {
        zoom: 0.8;
    }

    .add-dice-btn, .control-btn {
        padding: 8px 16px;
        font-size: 0.9em;
        border-width: 3px;
        margin: 4px;
    }

    .dice {
        width: 65px;
        height: 65px;
        font-size: 1.3em;
        border-width: 3px;
    }

    .drop-area {
        min-height: 90px;
        border-width: 3px;
        gap: 4px; /* smaller space between dice */
        padding: 6px;
        margin: 6px;
    }

    #weapon, #ability1, #ability2 {
        grid-template-columns: repeat(3, 65px);
        grid-auto-rows: 65px;
    }

    .drop-total {
        font-size: 1.2em;
        right: 8px;
        top: 4px;
    }

    .overall-total-box {
        font-size: 1.3em;
        padding: 8px 14px;
        border-width: 3px;
    }
}
</style>

<!-- Roll / Reset -->
<div style="margin-bottom:15px;">
    <button type="button" class="control-btn" onclick="rollDice()">Roll All</button>
    <button type="button"
            class="control-btn"
            style="background-color:#ffcccc;color:black;"
            onclick="resetDice()">
        Reset
    </button>
</div>

<!-- Dice Buttons -->
<div style="margin-top:15px; display:flex; flex-wrap:wrap; gap:10px;">
    @{
        var diceTypes = new[] { "Standard", "Bleed", "Poison", "Burn", "Smite", "Curse" };
        foreach (var type in diceTypes)
        {
            string bg = type switch
            {
                "Standard" => "purple",
                "Bleed" => "red",
                "Poison" => "green",
                "Burn" => "orange",
                "Smite" => "white",
                "Curse" => "black",
                _ => "gray"
            };
            string textColor = type switch
            {
                "Smite" => "gold",
                "Curse" => "purple",
                _ => "black"
            };
            <button type="button"
                    class="add-dice-btn"
                    style="background-color:@bg;color:@textColor;"
                    onclick="addDice('@type')">
                @type
            </button>
            ;
        }
    }
</div>

<!-- Dice Pool -->
<div id="pool" class="drop-area">
    <div class="drop-label">Dice Pool</div>
    <div class="drop-total" id="pool-total">0</div>
    @for (int i = 0; i < Model.DiceList.Count; i++)
    {
        var dice = Model.DiceList[i];
        if (dice.Location == "pool")
        {
            string background = dice.Type switch
            {
                DiceWebApp.Models.DiceType.Standard => "purple",
                DiceWebApp.Models.DiceType.Bleed => "red",
                DiceWebApp.Models.DiceType.Poison => "green",
                DiceWebApp.Models.DiceType.Burn => "orange",
                DiceWebApp.Models.DiceType.Smite => "white",
                DiceWebApp.Models.DiceType.Curse => "black",
                _ => "gray"
            };
            string color = dice.Type switch
            {
                DiceWebApp.Models.DiceType.Smite => "gold",
                DiceWebApp.Models.DiceType.Curse => "purple",
                _ => "black"
            };
            <div id="dice-@i"
                 class="dice"
                 draggable="true"
                 onclick="removeDice(@i)"
                 style="background-color:@background;color:@color;">
                @dice.Value
            </div>
        }
    }
</div>

<!-- Drop Zones -->
<div style="display:flex;flex-wrap:wrap;gap:20px;margin-top:30px;justify-content:center;">
    @foreach (var zone in new[] { "weapon", "ability1", "ability2" })
    {
        <div class="drop-area" id="@zone">
            <div class="drop-label">
                @(zone switch
                {
                    "weapon" => "Weapon",
                    "ability1" => "Ability 1",
                    "ability2" => "Ability 2",
                    _ => zone
                })
        </div>
        <div class="drop-total" id="@zone-total">0</div>
        @for (int i = 0; i < Model.DiceList.Count; i++)
            {
                var dice = Model.DiceList[i];
                if (dice.Location == zone)
                {
                    string background = dice.Type switch
                    {
                        DiceWebApp.Models.DiceType.Standard => "purple",
                        DiceWebApp.Models.DiceType.Bleed => "red",
                        DiceWebApp.Models.DiceType.Poison => "green",
                        DiceWebApp.Models.DiceType.Burn => "orange",
                        DiceWebApp.Models.DiceType.Smite => "white",
                        DiceWebApp.Models.DiceType.Curse => "black",
                        _ => "gray"
                    };
                    string color = dice.Type switch
                    {
                        DiceWebApp.Models.DiceType.Smite => "gold",
                        DiceWebApp.Models.DiceType.Curse => "purple",
                        _ => "black"
                    };
                    <div id="dice-@i"
                         class="dice"
                         draggable="true"
                         onclick="removeDice(@i)"
                         style="background-color:@background;color:@color;">
                        @(dice.Value.HasValue? dice.Value.ToString() : "")
                    </div>
                }
            }
        </div>
    }
</div>

<!-- Total -->
<div style="text-align:center;">
    <div class="overall-total-box">
        Total: <span id="overall-total">0</span>
    </div>
</div>

<script>
    async function addDice(type) {
        const response = await fetch('/Dice/Add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `type=${type}`
        });
        if (response.ok) {
            const newDie = await response.json();
            const dicePool = document.getElementById('pool');
            const diceDiv = document.createElement('div');
            diceDiv.id = `dice-${newDie.index}`;
            diceDiv.className = 'dice';
            diceDiv.draggable = true;
            diceDiv.onclick = () => removeDice(newDie.index);
            diceDiv.innerText = newDie.value !== null ? newDie.value : '';

            const colorMap = {
                Standard: ["purple", "black"],
                Bleed: ["red", "black"],
                Poison: ["green", "black"],
                Burn: ["orange", "black"],
                Smite: ["white", "gold"],
                Curse: ["black", "purple"]
            };
            const [bg, color] = colorMap[newDie.type] || ["gray", "black"];
            diceDiv.style.backgroundColor = bg;
            diceDiv.style.color = color;

            dicePool.appendChild(diceDiv);
            bindDragEvents();
            enableTouchDrag(diceDiv);
            updateZoneTotals();
        }
    }

    async function rollDice() {
        const response = await fetch('/Dice/RollJson', { method: 'POST' });
        const dice = await response.json();
        const diceButtons = document.querySelectorAll('.dice');
        dice.forEach((d, i) => {
            if (diceButtons[i]) diceButtons[i].innerText = d.value;
        });
        updateZoneTotals();
    }

            async function resetDice() {
        const response = await fetch('/Dice/Reset', { method: 'POST' });
        if (response.ok) {
            document.querySelectorAll('.dice').forEach(d => {
                d.style.transition = "opacity 0.3s";
                d.style.opacity = "0";
                setTimeout(() => d.remove(), 300);
            });
            document.querySelectorAll('.drop-total').forEach(t => t.textContent = "0");
            document.getElementById('overall-total').textContent = "0";
        }
    }


    function allowDrop(e) { e.preventDefault(); e.currentTarget.classList.add('dragover'); }
    function dragHandler(e) { e.dataTransfer.setData("text/plain", e.target.id); e.target.style.opacity = "0.5"; }
    function dragEnd(e) { e.target.style.opacity = "1"; }
    function dropHandler(e) {
        e.preventDefault();
        e.currentTarget.classList.remove('dragover');
        const diceId = e.dataTransfer.getData("text/plain");
        moveDiceToZone(diceId, e.currentTarget.id);
    }

    function moveDiceToZone(diceId, zoneId) {
        const dice = document.getElementById(diceId);
        if (!dice) return;
        const diceCount = document.getElementById(zoneId).querySelectorAll(".dice").length;
        if ((zoneId === "weapon" || zoneId === "ability1" || zoneId === "ability2") && diceCount >= 9) return;
        document.getElementById(zoneId).appendChild(dice);
        dice.style.opacity = "1";
        const diceIndex = parseInt(diceId.replace('dice-', ''));
        fetch('/Dice/Move', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `index=${diceIndex}&zone=${zoneId}`
        });
        updateZoneTotals();
    }

    // ✅ Improved Touch drag (accurate and snap-back if invalid)
    function enableTouchDrag(elem) {
        let offsetX = 0, offsetY = 0;
        let originalParent = null;

        elem.addEventListener('touchstart', e => {
            const t = e.touches[0];
            const rect = elem.getBoundingClientRect();
            offsetX = t.clientX - rect.left;
            offsetY = t.clientY - rect.top;
            originalParent = elem.parentElement;
            elem.style.opacity = "0.6";
        });

        elem.addEventListener('touchmove', e => {
            const t = e.touches[0];
            e.preventDefault(); // Prevent screen scroll while dragging
            elem.style.position = 'fixed';
            elem.style.left = (t.clientX - offsetX) + 'px';
            elem.style.top = (t.clientY - offsetY) + 'px';
            elem.style.zIndex = 1000;
        });

        elem.addEventListener('touchend', e => {
            elem.style.opacity = "1";
            elem.style.position = '';
            elem.style.left = '';
            elem.style.top = '';
            elem.style.zIndex = '';

            const t = e.changedTouches[0];
            const target = document.elementFromPoint(t.clientX, t.clientY);
            const dropZone = target ? target.closest('.drop-area') : null;

            if (dropZone) {
                moveDiceToZone(elem.id, dropZone.id);
            } else if (originalParent) {
                // Snap back to original container if dropped outside
                originalParent.appendChild(elem);
            }
        });
    }

    function bindDragEvents() {
        document.querySelectorAll('.dice').forEach(dice => {
            dice.addEventListener('dragstart', dragHandler);
            dice.addEventListener('dragend', dragEnd);
            enableTouchDrag(dice);
        });
    }

    function bindDropZones() {
        document.querySelectorAll('.drop-area').forEach(area => {
            area.addEventListener('dragover', allowDrop);
            area.addEventListener('drop', dropHandler);
        });
    }

    function updateZoneTotals() {
        const zones = ["pool", "weapon", "ability1", "ability2"];
        let overall = 0;
        zones.forEach(zone => {
            const zoneElem = document.getElementById(zone);
            const dice = zoneElem ? zoneElem.querySelectorAll('.dice') : [];
            let total = 0;
            dice.forEach(d => {
                const val = parseInt(d.innerText);
                if (!isNaN(val)) total += val;
            });
            const totalElem = document.getElementById(`${zone}-total`);
            if (totalElem) totalElem.textContent = total;
            overall += total;
        });
        document.getElementById('overall-total').textContent = overall;
    }

    document.addEventListener('DOMContentLoaded', () => {
        bindDragEvents();
        bindDropZones();
        updateZoneTotals();
    });
</script>